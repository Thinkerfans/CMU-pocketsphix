/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package edu.cmu.pocketsphinx;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Environment;

public class Config {
	public static String POCKETSPHIN_DIR = Environment.getExternalStorageDirectory().getAbsolutePath() + "/pocketsphinx";

	private long swigCPtr;
	protected boolean swigCMemOwn;

	protected Config(long cPtr, boolean cMemoryOwn) {
		swigCMemOwn = cMemoryOwn;
		swigCPtr = cPtr;
	}

	protected static long getCPtr(Config obj) {
		return (obj == null) ? 0 : obj.swigCPtr;
	}

	protected void finalize() {
		delete();
	}

	public synchronized void delete() {
		if (swigCPtr != 0) {
			if (swigCMemOwn) {
				swigCMemOwn = false;
				pocketsphinxJNI.delete_Config(swigCPtr);
			}
			swigCPtr = 0;
		}
	}

	public Config() {
		this(pocketsphinxJNI.new_Config__SWIG_0(), true);
	}

	public Config(String file) {
		this(pocketsphinxJNI.new_Config__SWIG_1(file), true);
	}

	public void setBoolean(String key, boolean val) {
		pocketsphinxJNI.Config_setBoolean(swigCPtr, this, key, val);
	}

	public void setInt(String key, int val) {
		pocketsphinxJNI.Config_setInt(swigCPtr, this, key, val);
	}

	public void setFloat(String key, double val) {
		pocketsphinxJNI.Config_setFloat(swigCPtr, this, key, val);
	}

	public void setString(String key, String val) {
		pocketsphinxJNI.Config_setString(swigCPtr, this, key, val);
	}

	public boolean exists(String key) {
		return pocketsphinxJNI.Config_exists(swigCPtr, this, key);
	}

	public boolean getBoolean(String key) {
		return pocketsphinxJNI.Config_getBoolean(swigCPtr, this, key);
	}

	public int getInt(String key) {
		return pocketsphinxJNI.Config_getInt(swigCPtr, this, key);
	}

	public double getFloat(String key) {
		return pocketsphinxJNI.Config_getFloat(swigCPtr, this, key);
	}

	public String getString(String key) {
		return pocketsphinxJNI.Config_getString(swigCPtr, this, key);
	}

	public static boolean isEnRecognition(Context c) {
		SharedPreferences sharedPreferences = c.getSharedPreferences("pocketsphinx", Context.MODE_PRIVATE);
		return sharedPreferences.getBoolean("language", false);
	}

	public static void setRecognitionLanguage(Context c, boolean isEnglish) {
		c.getSharedPreferences("pocketsphinx", Context.MODE_PRIVATE).edit().putBoolean("language", isEnglish).commit();
	}

	public static void copyFilesFromAssets(Context context, String oldPath, String newPath) {
		try {
			String fileNames[] = context.getAssets().list(oldPath);// 获取assets目录下的所有文件及目录名
			if (fileNames.length > 0) {// 如果是目录
				File file = new File(newPath);
				file.mkdirs();// 如果文件夹不存在，则递归
				for (String fileName : fileNames) {
					copyFilesFromAssets(context, oldPath + "/" + fileName, newPath + "/" + fileName);
				}
			} else {// 如果是文件
				InputStream is = context.getAssets().open(oldPath);
				FileOutputStream fos = new FileOutputStream(new File(newPath));
				byte[] buffer = new byte[1024];
				int byteCount = 0;
				while ((byteCount = is.read(buffer)) != -1) {// 循环从输入流读取
																// buffer字节
					fos.write(buffer, 0, byteCount);// 将读取的输入流写入到输出流
				}
				fos.flush();// 刷新缓冲区
				is.close();
				fos.close();
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			// 如果捕捉到错误则通知UI线程
		}
	}
}
